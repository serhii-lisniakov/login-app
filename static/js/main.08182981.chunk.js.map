{"version":3,"sources":["components/LoginForm/padlock.svg","components/LoginForm/check.svg","renderIf.js","components/LoginForm/StyledComponents.js","components/LoginForm/LoginForm.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","RenderIf","props","condition","children","FormWrapper","styled","form","FormLogo","div","logo","FormTitle","h1","FormNameWrapper","FormInput","input","FormCheckboxLabel","label","FormCheckbox","check","FormSubmit","FormActions","CopyRights","h6","LoginForm","state","firstName","lastName","password","email","remember","emailValid","passwordValid","formValid","validation","field","e","setState","target","value","emailReg","RegExp","passReg","style","borderColor","test","length","handleCheckboxChange","resetInputs","document","querySelectorAll","forEach","i","window","location","href","indexOf","type","placeholder","onChange","this","bind","name","autoComplete","id","onClick","htmlFor","to","justifyContent","Component","App","className","basename","exact","path","component","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.08182981.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/padlock.d964e0b3.svg\";","module.exports = __webpack_public_path__ + \"static/media/check.2824b0b1.svg\";","export const RenderIf = (props) => !!props.condition ? props.children : null;","import styled from 'styled-components';\r\nimport logo from './padlock.svg'\r\nimport check from './check.svg'\r\n\r\nexport const FormWrapper = styled.form`\r\n    width: 350px;\r\n    padding: 25px 15px;\r\n    color: #ffffff9a;\r\n`\r\nexport const FormLogo = styled.div`\r\n    margin: 0 auto;\r\n    width: 60px;\r\n    height: 60px;\r\n    border-radius: 50%;\r\n    background: url('${logo}') center center no-repeat, #f569ac;\r\n    background-size: 30px;\r\n`\r\nexport const FormTitle = styled.h1`\r\n    font-size: 24px;\r\n    margin-top: 10px;\r\n    margin-bottom: 0px;\r\n    color: #fff;\r\n    letter-spacing: 3px;\r\n    text-align: center;\r\n`\r\nexport const FormNameWrapper = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    & > input {\r\n        width: 46%\r\n    }\r\n`\r\nexport const FormInput = styled.input`\r\n    width: 100%;\r\n    height: 40px;\r\n    padding: 0 15px;\r\n    border: 1px solid #ffffff9a;\r\n    background: none;\r\n    color: #fff;\r\n    border-radius: 5px;\r\n    outline: none;\r\n    margin-top: 20px;\r\n    font-size: 14px;\r\n    &::placeholder {\r\n        font-size: 12px;\r\n        color: #ffffff9a;\r\n    }\r\n`\r\nexport const FormCheckboxLabel = styled.label`\r\n    display: flex;\r\n    align-items:center;\r\n    margin-top: 20px;\r\n    cursor: pointer;\r\n    font-size: 12px;\r\n    &::before {\r\n        content: '';\r\n        min-width: 13px;\r\n        min-height: 13px;\r\n        background: none;\r\n        border: 1px solid #ffffff9a;\r\n        border-radius: 50%;\r\n        margin-right: 10px;\r\n        transition: .2s;\r\n    }\r\n`\r\nexport const FormCheckbox = styled.input`\r\n    display: flex;  \r\n    width: 0.1px;\r\n    height: 0.1px;\r\n    margin: 0;\r\n    opacity: 0;\r\n    transition: .3s;\r\n    &:checked + label::before {\r\n        background: url('${check}') center center no-repeat, #f569ac;\r\n        background-size: 10px;\r\n        border-color: #f569ac;\r\n        transition: .2s;\r\n    }\r\n`\r\nexport const FormSubmit = styled.input`\r\n    width: 100%;\r\n    height: 30px;\r\n    padding: 0 15px;\r\n    border: none;\r\n    background: #59b6d3;\r\n    color: #000;\r\n    text-transform: uppercase;\r\n    border-radius: 5px;\r\n    outline: none;\r\n    margin-top: 20px;\r\n    font-size: 13px;\r\n    font-weight: bold;\r\n    cursor: pointer;\r\n    letter-spacing: 1px;\r\n    &:active {\r\n        background: #4c9cb4;\r\n    }\r\n    box-shadow: 0 0 20px 0 #ffffff1e; \r\n`\r\nexport const FormActions = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    margin-top: 10px;\r\n    & > a {\r\n        color: #59b6d3;\r\n        text-decoration: none !important;\r\n        font-size: 10px;\r\n        letter-spacing: 1px;\r\n    }\r\n`\r\nexport const CopyRights = styled.h6`\r\n    margin: 0;\r\n    margin-top: 50px;\r\n    font-weight: normal;\r\n    text-align: center;\r\n`","import React, {Component} from 'react'\r\nimport {RenderIf} from '../../renderIf'\r\nimport {Link} from 'react-router-dom'\r\nimport {FormWrapper, FormLogo, FormTitle, FormNameWrapper, FormInput, FormCheckboxLabel, FormCheckbox, FormSubmit, FormActions, CopyRights} from './StyledComponents'\r\n\r\nexport default class LoginForm extends Component {\r\n    state = {\r\n        firstName: '',\r\n        lastName: '',\r\n        password: '',\r\n        email: '',\r\n        remember: false,\r\n        emailValid: false,\r\n        passwordValid: false,\r\n        formValid: false\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        // console.log(this.state)\r\n        // console.log('emailValid  ' , this.state.emailValid)\r\n        // console.log('remember?  ' + this.state.remember)\r\n        // console.log('passValid  ' + this.state.passwordValid)\r\n    }\r\n\r\n    validation = (field, e) => {\r\n        \r\n        this.setState({[field]: e.target.value})\r\n\r\n        const emailReg = new RegExp(/^([a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]{3,})+@([a-zA-Z0-9-]{2,})+\\.([a-zA-Z0-9-]{2,})$/);\r\n        const passReg = new RegExp(/^(?=.*[A-Z])([a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]{8,})$/);\r\n\r\n        e.target.style.borderColor = 'green'\r\n\r\n            if (field === 'email') {\r\n                if (!emailReg.test(e.target.value)) e.target.style.borderColor = 'red'\r\n            } \r\n            else if (field === 'password') {\r\n                if (!passReg.test(e.target.value)) e.target.style.borderColor = 'red'\r\n            }\r\n            else if (field === 'firstName' || field === 'lastName') {\r\n                if (e.target.value.length < 3) e.target.style.borderColor = 'red'\r\n            }\r\n\r\n    }\r\n\r\n    handleCheckboxChange = () => this.setState({remember: !this.state.remember})\r\n\r\n    resetInputs = () => {\r\n        this.setState({\r\n            firstName: '',\r\n            lastName: '',\r\n            password: '',\r\n            email: '',\r\n            remember: false,\r\n            emailValid: false,\r\n            passwordValid: false,\r\n            formValid: false\r\n        })\r\n\r\n        document.querySelectorAll(`form > input`).forEach(i => i.style.borderColor = '#ffffff9a')\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <FormWrapper>\r\n                    {/* logo */}\r\n                    <FormLogo />\r\n\r\n                    {/* title */}\r\n                    <RenderIf condition={window.location.href.indexOf('/up') === -1}>\r\n                        <FormTitle>Sign In</FormTitle>\r\n                    </RenderIf>\r\n                    <RenderIf condition={window.location.href.indexOf('/up') !== -1}>\r\n                        <FormTitle>Sign Up</FormTitle>\r\n\r\n                    {/* name inputs */}\r\n                        <FormNameWrapper>\r\n                            <FormInput  type='text' \r\n                                        placeholder='First Name *' \r\n                                        onChange={this.validation.bind(this, 'firstName')}\r\n                                        value={this.state.firstName}\r\n                                        />\r\n                            <FormInput  type='text' \r\n                                        placeholder='Last Name *' \r\n                                        onChange={this.validation.bind(this, 'lastName')}\r\n                                        value={this.state.lastName}\r\n                                        />\r\n                        </FormNameWrapper>\r\n                    </RenderIf>\r\n\r\n                    {/* email & pass inputs */}\r\n                        <FormInput  type='text' \r\n                                    placeholder='Email *' \r\n                                    onChange={this.validation.bind(this, 'email')}\r\n                                    value={this.state.email}  \r\n                        />\r\n                        <FormInput  type='password' \r\n                                    placeholder='Password *' \r\n                                    name='password' \r\n                                    autoComplete='on' \r\n                                    onChange={this.validation.bind(this, 'password')}\r\n                                    value={this.state.password}\r\n                        />\r\n\r\n                    {/* checkbox in */}\r\n                    <RenderIf condition={window.location.href.indexOf('/up') === -1}> \r\n                        <div>\r\n                            <FormCheckbox id='remember' type='checkbox' value={this.state.remember} onClick={this.handleCheckboxChange}/>\r\n                            <FormCheckboxLabel htmlFor='remember'>Remember me</FormCheckboxLabel>\r\n                        </div>\r\n                        <FormSubmit type='submit' value='Sign In' />\r\n                        <FormActions>\r\n                            <Link to='/in'>Forgot password?</Link>\r\n                            <Link to='/up' onClick={this.resetInputs}>Dont have an account? Sign up</Link>\r\n                        </FormActions>\r\n                    </RenderIf>\r\n                        \r\n                    {/* checkbox up */}\r\n                    <RenderIf condition={window.location.href.indexOf('/up') !== -1}>\r\n                        <div>\r\n                            <FormCheckbox id='remember' type='checkbox' value={this.state.remember} onClick={this.handleCheckboxChange}/>\r\n                            <FormCheckboxLabel htmlFor='remember'>I want to recieve an inspiration, marketing promotions and updates via email.</FormCheckboxLabel>\r\n                        </div>\r\n                        <FormSubmit type='submit' value='Sign Up' />\r\n                        <FormActions style={{justifyContent: 'flex-end'}}>\r\n                            <Link to='/in' onClick={this.resetInputs}>Already have an account? Sign in</Link>\r\n                        </FormActions>\r\n                    </RenderIf>\r\n\r\n                    {/* CopyRights */}\r\n                    <CopyRights>Copyright © Serhii Lisniakov 2020</CopyRights>\r\n\r\n                </FormWrapper>\r\n            </>\r\n        )\r\n    }\r\n} ","import React from 'react';\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\nimport './App.css';\nimport LoginForm from './components/LoginForm/LoginForm';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router basename='/login-app'>\n        <Switch>\n          <Route exact path='/in' component={LoginForm}/>\n          <Route exact path='/up' component={LoginForm}/>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}